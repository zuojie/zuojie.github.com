启动服务：python manage.py runserver

建立project
1
建立工程

python C:\Python27\Lib\site-packages\django\bin\django-admin.py startproject arvindemo

2
建立app【DB】
python manage.py startapp user_info

3
修改settings.py文件，修改INSTALL_APPS项

4
编辑user_info文件夹下的models.py文件，增加表的定义

5
回到上级目录【manage.py所在目录】，运行：python manage.py validate看models.py文件是否有错误

6
运行python manage.py sqlall user_info
查看建立的表是否符合预期

7
python manage.py syncdb
真正建表

8
运行：python manage.py shell

>>> from arvindemo.user_info.models import customerInfo
>>> c1 = customerInfo(goods_name='具体数学', goods_book=1, min_price=50, phone='15801178340')
徒手插入数据
>>> cl.save()
查看表


Django1.4对静态文件的访问：
1
在工程目录下【也就是和setting同一个目录】建立static文件夹，将静态文件放入

2
更改settings.py文件项：
# Additional locations of static files
import os.path
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(os.path.dirname(__file__), 'static').replace('\\','/'),
)

3
更改urls.py项
urlpatterns=patterns增加：
url(r'^static/(?P<path>.*)$','django.views.static.serve',{'document_root':settings.STATICFILES_DIRS}),
    
4
在用到这些静态文件的html文件里，用法示例如下：
<script src="/static/car.js" type="text/javascript"></script>
<link type="text/css" href="/static/img_main.css" rel="stylesheet" />
		
<img src="/static/img/t2.jpg" width="815" height="294" />



不要相信用户输入

始终通过测试类型、长度、格式和范围来验证用户输入。实现对恶意输入的预防时，请注意应用程序的体系结构和部署方案。请注意，设计为在安全环境中运行的程序可能会被复制到不安全的环境中。以下建议应被视为最佳做法：

对应用程序接收的数据不做任何有关大小、类型或内容的假设。例如，您应该进行以下评估：

如果一个用户在需要邮政编码的位置无意中或恶意地输入了一个 10 MB 的 MPEG 文件，应用程序会做出什么反应？

如果在文本字段中嵌入了一个 DROP TABLE 语句，应用程序会做出什么反应？

测试输入的大小和数据类型，强制执行适当的限制。这有助于防止有意造成的缓冲区溢出。

测试字符串变量的内容，只接受所需的值。拒绝包含二进制数据、转义序列和注释字符的输入内容。这有助于防止脚本注入，防止某些缓冲区溢出攻击。

使用 XML 文档时，根据数据的架构对输入的所有数据进行验证。

绝不直接使用用户输入内容来生成 Transact-SQL 语句。

使用存储过程来验证用户输入。

在多层环境中，所有数据都应该在验证之后才允许进入可信区域。未通过验证过程的数据应被拒绝，并向前一层返回一个错误。

实现多层验证。对无目的的恶意用户采取的预防措施对坚定的攻击者可能无效。更好的做法是在用户界面和所有跨信任边界的后续点上验证输入。

例如，在客户端应用程序中验证数据可以防止简单的脚本注入。但是，如果下一层认为其输入已通过验证，则任何可以绕过客户端的恶意用户就可以不受限制地访问系统。

绝不串联未验证的用户输入。字符串串联是脚本注入的主要输入点。

在可能据以构造文件名的字段中，不接受下列字符串：AUX、CLOCK$、COM1 到 COM8、CON、CONFIG$、LPT1 到 LPT8、NUL 以及 PRN。

如果可能，拒绝包含以下字符的输入。

输入字符

在 Transact-SQL 中的含义

;
查询分隔符。
'
字符数据字符串分隔符。
--
注释分隔符。
/* ... */
注释分隔符。服务器不对 /* 和 */ 之间的注释进行处理。
xp_
用于目录扩展存储过程的名称的开头，如 xp_cmdshe